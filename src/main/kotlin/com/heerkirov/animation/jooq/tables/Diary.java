/*
 * This file is generated by jOOQ.
 */
package com.heerkirov.animation.jooq.tables;


import com.heerkirov.animation.jooq.Indexes;
import com.heerkirov.animation.jooq.Keys;
import com.heerkirov.animation.jooq.Public;
import com.heerkirov.animation.jooq.tables.records.DiaryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diary extends TableImpl<DiaryRecord> {

    private static final long serialVersionUID = -85076119;

    /**
     * The reference instance of <code>public.diary</code>
     */
    public static final Diary DIARY = new Diary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiaryRecord> getRecordType() {
        return DiaryRecord.class;
    }

    /**
     * The column <code>public.diary.id</code>.
     */
    public final TableField<DiaryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('diary_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.diary.owner_id</code>.
     */
    public final TableField<DiaryRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.diary.animation_id</code>.
     */
    public final TableField<DiaryRecord, Integer> ANIMATION_ID = createField(DSL.name("animation_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.diary.status</code>.
     */
    public final TableField<DiaryRecord, Short> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.diary.watched_quantity</code>.
     */
    public final TableField<DiaryRecord, Integer> WATCHED_QUANTITY = createField(DSL.name("watched_quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.diary.watched_record</code>.
     */
    public final TableField<DiaryRecord, JSONB> WATCHED_RECORD = createField(DSL.name("watched_record"), org.jooq.impl.SQLDataType.JSONB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'[]'::jsonb", org.jooq.impl.SQLDataType.JSONB)), this, "");

    /**
     * The column <code>public.diary.watch_progress</code>.
     */
    public final TableField<DiaryRecord, Double> WATCH_PROGRESS = createField(DSL.name("watch_progress"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.diary.watch_original</code>.
     */
    public final TableField<DiaryRecord, Boolean> WATCH_ORIGINAL = createField(DSL.name("watch_original"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.diary.watch_many_times</code>.
     */
    public final TableField<DiaryRecord, Boolean> WATCH_MANY_TIMES = createField(DSL.name("watch_many_times"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.diary.subscription_time</code>.
     */
    public final TableField<DiaryRecord, LocalDateTime> SUBSCRIPTION_TIME = createField(DSL.name("subscription_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.diary.finish_time</code>.
     */
    public final TableField<DiaryRecord, LocalDateTime> FINISH_TIME = createField(DSL.name("finish_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.diary.create_time</code>.
     */
    public final TableField<DiaryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.diary.update_time</code>.
     */
    public final TableField<DiaryRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.diary</code> table reference
     */
    public Diary() {
        this(DSL.name("diary"), null);
    }

    /**
     * Create an aliased <code>public.diary</code> table reference
     */
    public Diary(String alias) {
        this(DSL.name(alias), DIARY);
    }

    /**
     * Create an aliased <code>public.diary</code> table reference
     */
    public Diary(Name alias) {
        this(alias, DIARY);
    }

    private Diary(Name alias, Table<DiaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diary(Name alias, Table<DiaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Diary(Table<O> child, ForeignKey<O, DiaryRecord> key) {
        super(child, key, DIARY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DIARY__INDEX, Indexes.DIARY__OWNER_ID__INDEX);
    }

    @Override
    public Identity<DiaryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIARY;
    }

    @Override
    public UniqueKey<DiaryRecord> getPrimaryKey() {
        return Keys.DIARY_PKEY;
    }

    @Override
    public List<UniqueKey<DiaryRecord>> getKeys() {
        return Arrays.<UniqueKey<DiaryRecord>>asList(Keys.DIARY_PKEY);
    }

    @Override
    public Diary as(String alias) {
        return new Diary(DSL.name(alias), this);
    }

    @Override
    public Diary as(Name alias) {
        return new Diary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diary rename(String name) {
        return new Diary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diary rename(Name name) {
        return new Diary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Integer, Short, Integer, JSONB, Double, Boolean, Boolean, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
