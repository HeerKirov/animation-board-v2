/*
 * This file is generated by jOOQ.
 */
package com.heerkirov.animation.jooq.tables;


import com.heerkirov.animation.jooq.Keys;
import com.heerkirov.animation.jooq.Public;
import com.heerkirov.animation.jooq.tables.records.AnimationRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Animation extends TableImpl<AnimationRecord> {

    private static final long serialVersionUID = -1905265925;

    /**
     * The reference instance of <code>public.animation</code>
     */
    public static final Animation ANIMATION = new Animation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnimationRecord> getRecordType() {
        return AnimationRecord.class;
    }

    /**
     * The column <code>public.animation.id</code>.
     */
    public final TableField<AnimationRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('animation_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.animation.title</code>.
     */
    public final TableField<AnimationRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.animation.origin_title</code>.
     */
    public final TableField<AnimationRecord, String> ORIGIN_TITLE = createField(DSL.name("origin_title"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.animation.other_title</code>.
     */
    public final TableField<AnimationRecord, String> OTHER_TITLE = createField(DSL.name("other_title"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.animation.cover</code>.
     */
    public final TableField<AnimationRecord, String> COVER = createField(DSL.name("cover"), org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.animation.original_work_type</code>.
     */
    public final TableField<AnimationRecord, Short> ORIGINAL_WORK_TYPE = createField(DSL.name("original_work_type"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.animation.publish_type</code>.
     */
    public final TableField<AnimationRecord, Short> PUBLISH_TYPE = createField(DSL.name("publish_type"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.animation.publish_time</code>.
     */
    public final TableField<AnimationRecord, LocalDate> PUBLISH_TIME = createField(DSL.name("publish_time"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.animation.duration</code>.
     */
    public final TableField<AnimationRecord, Integer> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.animation.sum_quantity</code>.
     */
    public final TableField<AnimationRecord, Integer> SUM_QUANTITY = createField(DSL.name("sum_quantity"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.animation.published_quantity</code>.
     */
    public final TableField<AnimationRecord, Integer> PUBLISHED_QUANTITY = createField(DSL.name("published_quantity"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.animation.published_record</code>.
     */
    public final TableField<AnimationRecord, LocalDateTime[]> PUBLISHED_RECORD = createField(DSL.name("published_record"), org.jooq.impl.SQLDataType.LOCALDATETIME.getArrayDataType(), this, "");

    /**
     * The column <code>public.animation.publish_plan</code>.
     */
    public final TableField<AnimationRecord, LocalDateTime[]> PUBLISH_PLAN = createField(DSL.name("publish_plan"), org.jooq.impl.SQLDataType.LOCALDATETIME.getArrayDataType(), this, "");

    /**
     * The column <code>public.animation.introduction</code>.
     */
    public final TableField<AnimationRecord, String> INTRODUCTION = createField(DSL.name("introduction"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.animation.keyword</code>.
     */
    public final TableField<AnimationRecord, String> KEYWORD = createField(DSL.name("keyword"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.animation.limit_level_sex</code>.
     */
    public final TableField<AnimationRecord, Short> LIMIT_LEVEL_SEX = createField(DSL.name("limit_level_sex"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.animation.limit_level_violence</code>.
     */
    public final TableField<AnimationRecord, Short> LIMIT_LEVEL_VIOLENCE = createField(DSL.name("limit_level_violence"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.animation.relations</code>.
     */
    public final TableField<AnimationRecord, JSONB> RELATIONS = createField(DSL.name("relations"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.animation.relations_topology</code>.
     */
    public final TableField<AnimationRecord, JSONB> RELATIONS_TOPOLOGY = createField(DSL.name("relations_topology"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.animation.create_time</code>.
     */
    public final TableField<AnimationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.animation.update_time</code>.
     */
    public final TableField<AnimationRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.animation.creator</code>.
     */
    public final TableField<AnimationRecord, Integer> CREATOR = createField(DSL.name("creator"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.animation.updater</code>.
     */
    public final TableField<AnimationRecord, Integer> UPDATER = createField(DSL.name("updater"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.animation</code> table reference
     */
    public Animation() {
        this(DSL.name("animation"), null);
    }

    /**
     * Create an aliased <code>public.animation</code> table reference
     */
    public Animation(String alias) {
        this(DSL.name(alias), ANIMATION);
    }

    /**
     * Create an aliased <code>public.animation</code> table reference
     */
    public Animation(Name alias) {
        this(alias, ANIMATION);
    }

    private Animation(Name alias, Table<AnimationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Animation(Name alias, Table<AnimationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Animation(Table<O> child, ForeignKey<O, AnimationRecord> key) {
        super(child, key, ANIMATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AnimationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANIMATION;
    }

    @Override
    public UniqueKey<AnimationRecord> getPrimaryKey() {
        return Keys.ANIMATION_PKEY;
    }

    @Override
    public List<UniqueKey<AnimationRecord>> getKeys() {
        return Arrays.<UniqueKey<AnimationRecord>>asList(Keys.ANIMATION_PKEY);
    }

    @Override
    public Animation as(String alias) {
        return new Animation(DSL.name(alias), this);
    }

    @Override
    public Animation as(Name alias) {
        return new Animation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Animation rename(String name) {
        return new Animation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Animation rename(Name name) {
        return new Animation(name, null);
    }
}
