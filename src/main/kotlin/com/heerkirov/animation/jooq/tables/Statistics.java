/*
 * This file is generated by jOOQ.
 */
package com.heerkirov.animation.jooq.tables;


import com.heerkirov.animation.jooq.Indexes;
import com.heerkirov.animation.jooq.Keys;
import com.heerkirov.animation.jooq.Public;
import com.heerkirov.animation.jooq.tables.records.StatisticsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statistics extends TableImpl<StatisticsRecord> {

    private static final long serialVersionUID = 976645746;

    /**
     * The reference instance of <code>public.statistics</code>
     */
    public static final Statistics STATISTICS = new Statistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatisticsRecord> getRecordType() {
        return StatisticsRecord.class;
    }

    /**
     * The column <code>public.statistics.id</code>.
     */
    public final TableField<StatisticsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('statistics_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.statistics.owner_id</code>.
     */
    public final TableField<StatisticsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.statistics.type</code>.
     */
    public final TableField<StatisticsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.statistics.key</code>.
     */
    public final TableField<StatisticsRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.statistics.content</code>.
     */
    public final TableField<StatisticsRecord, JSONB> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.statistics.create_time</code>.
     */
    public final TableField<StatisticsRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.statistics.update_time</code>.
     */
    public final TableField<StatisticsRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.statistics</code> table reference
     */
    public Statistics() {
        this(DSL.name("statistics"), null);
    }

    /**
     * Create an aliased <code>public.statistics</code> table reference
     */
    public Statistics(String alias) {
        this(DSL.name(alias), STATISTICS);
    }

    /**
     * Create an aliased <code>public.statistics</code> table reference
     */
    public Statistics(Name alias) {
        this(alias, STATISTICS);
    }

    private Statistics(Name alias, Table<StatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statistics(Name alias, Table<StatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Statistics(Table<O> child, ForeignKey<O, StatisticsRecord> key) {
        super(child, key, STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATISTICS__INDEX, Indexes.STATISTICS__OWNER_ID__INDEX);
    }

    @Override
    public Identity<StatisticsRecord, Long> getIdentity() {
        return Keys.IDENTITY_STATISTICS;
    }

    @Override
    public UniqueKey<StatisticsRecord> getPrimaryKey() {
        return Keys.STATISTICS_PKEY;
    }

    @Override
    public List<UniqueKey<StatisticsRecord>> getKeys() {
        return Arrays.<UniqueKey<StatisticsRecord>>asList(Keys.STATISTICS_PKEY);
    }

    @Override
    public Statistics as(String alias) {
        return new Statistics(DSL.name(alias), this);
    }

    @Override
    public Statistics as(Name alias) {
        return new Statistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statistics rename(String name) {
        return new Statistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statistics rename(Name name) {
        return new Statistics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, String, String, JSONB, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
