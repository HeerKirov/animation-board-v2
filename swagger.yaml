openapi: "3.0.0"
info:
  title: Animation Board v2
  version: 0.3.0
  description: |
    Animation Board的v2版本。
    这是一个Basic Service下属的应用，使用BS提供的用户认证服务。有关BS的使用，见[Basic Service REST API](http://www.heerkirov.com/swagger/?url=/swagger/docs/basic-service.yaml)。
    ## 用户认证
    系统采用BS系统的认证方式，即使用Bearer Token进行唯一认证。发送请求时，首先从BS系统取得有效的Token，随后使用如下header：
    ```
    Authorization: Bearer XXXXXX
    ```
    不同部分的API有不同的授权要求：
    - 公共数据库部分的SAFE METHOD不需要任何认证，未登录用户也可以访问。
    - 公共数据库部分的UNSAFE METHOD需要管理员身份的用户。
    - 个人部分的API需要登录认证。
    ## 公共错误
    所有错误都遵循一个相同的返回格式：
    ```json
    {"code": "ERROR_CODE", "message": "Error message"}
    ```
    下列几类错误返回是任何API都可能抛出的。不再在API详情中单独列出。
    ### 400 Bad Request
    * `EMPTY_REQUEST_BODY` - 需要请求内容
    * `INVALID_REQUEST_BODY` - 请求内容无法解析
    * `INVALID_CONTENT_TYPE` - 请求内容的Content-Type不正确
    * `TYPE_ERROR` - 参数类型错误，请参照类型schema更正
    * `PARAM_ERROR` - 参数格式或内容错误，请参照类型schema和参数说明更正
    * `PARAM_REQUIRED` - 参数缺失，请参照请求要求补充参数
    ### 401 Unauthorized
    * `UNAUTHORIZED` - 没有提供认证信息，或认证信息无效，请提供正确格式的Token
    * `AUTHENTICATION_FAILED` - 认证失败，请提供有效的Token
    ### 403 Forbidden
    * `FORBIDDEN` - 没有访问权限，请更换更高权限的账户
    ### 404 Not Found
    * `NOT_FOUND` - 找不到此API指定的资源
    * 没有此API。
    ### 500 Internal Server Error
    * `INTERNAL_SERVER_ERROR` - 服务器发生内部错误。

servers:
  - description: "线上服务器"
    url: "https://animation.heerkirov.com"
  - description: "本地服务器"
    url: "http://localhost:8080"
tags:
  - name: "Animation"
    description: "动画数据库"
  - name: "Tag"
    description: "标签数据库"
  - name: "Staff"
    description: "相关人员数据库"
  - name: "Record"
    description: "用户观看记录"
  - name: "Comment"
    description: "用户评价"
  - name: "Statistic"
    description: "用户行为统计"
  - name: "User"
    description: "用户相关服务"
  - name: "Util"
    description: "工具和杂项"

paths:
  /api/database/animations:
    get:
      summary: 查看动画列表
      tags: [Animation]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: tag
          in: query
          description: 按标签过滤。参数值既可以是tag.name，也可以是tag.id
          schema: {type: string}
        - name: staff
          in: query
          description: 按相关人员过滤。参数值既可以是staff.name，也可以是staff.id
          schema: {type: string}
        - name: staff_type
          in: query
          description: 按相关人员关联类型过滤。配合`staff`参数使用。
          schema: {$ref: '#/components/schemas/StaffType'}
        - name: original_work_type
          in: query
          description: 按原作类型过滤
          schema: {$ref: '#/components/schemas/OriginalWorkType'}
        - name: publish_type
          in: query
          description: 按放送类型过滤
          schema: {$ref: '#/components/schemas/PublishType'}
        - name: publish_time
          in: query
          description: 按放送时间过滤。指定年月则精确过滤年月，只指定年则按年过滤
          schema: {type: string, format: 'yyyy[-MM]'}
        - name: sex_limit_level
          in: query
          description: 按分级(性)过滤
          schema: {$ref: '#/components/schemas/SexLimitLevel'}
        - name: violence_limit_level
          in: query
          description: 按分级(暴力)过滤
          schema: {$ref: '#/components/schemas/ViolenceLimitLevel'}
        - name: order
          in: query
          description: 排序。使用逗号(`,`)组合排序，使用减号(`-`)降序排序
          schema:
            type: string
            enum: [publish_time, create_time, update_time, sex_limit_level, violence_limit_level]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/AnimationRes'}
    post:
      summary: 创建新的动画条目
      tags: [Animation]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AnimationForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AnimationDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `NOT_EXISTS`
                        * "Tag {} not exists." - 此id的tag不存在
                        * "Staff {} not exists." - 此id的staff不存在
                        * "Cannot find animation {}." - 此id的animation不存在
  /api/database/animations/{id}:
    get:
      summary: 查看动画详情
      tags: [Animation]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AnimationDetailRes'}
    patch:
      summary: 更新动画条目
      tags: [Animation]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AnimationPartialForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AnimationDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `NOT_EXISTS`
                        * "Tag {} not exists." - 此id的tag不存在
                        * "Staff {} not exists." - 此id的staff不存在
                        * "Cannot find animation {}." - 此id的animation不存在
    delete:
      summary: 删除动画条目
      tags: [Animation]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        204:
          description: No Content
  /api/database/tags:
    get:
      summary: 查看标签列表
      tags: [Tag]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: order
          in: query
          description: 排序。使用逗号(`,`)组合排序，使用减号(`-`)降序排序
          schema:
            type: string
            enum: [name, create_time, update_time]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/TagListRes'}
    post:
      summary: 创建新的标签
      tags: [Tag]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/TagCreateForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TagDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此name的tag已经存在
  /api/database/tags/{id}:
    get:
      summary: 查看标签详情
      tags: [Tag]
      parameters:
        - $ref: '#/components/parameters/TagId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TagDetailRes'}
    put:
      summary: 更新标签内容
      tags: [Tag]
      parameters:
        - $ref: '#/components/parameters/TagId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/TagUpdateForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TagDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此name的tag已经存在
    patch:
      summary: 部分更新标签内容
      tags: [Tag]
      parameters:
        - $ref: '#/components/parameters/TagId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/TagPartialForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TagDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此name的tag已经存在
    delete:
      summary: 删除标签
      tags: [Tag]
      parameters:
        - $ref: '#/components/parameters/TagId'
      responses:
        204:
          description: No Content
  /api/database/staffs:
    get:
      summary: 查看相关人员列表
      tags: [Staff]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: is_organization
          in: query
          description: 按是否为组织过滤
          schema: {type: boolean}
        - name: occupation
          in: query
          description: 按相关人员职业过滤
          schema: {$ref: '#/components/schemas/StaffOccupation'}
        - name: order
          in: query
          description: 排序。使用逗号(`,`)组合排序，使用减号(`-`)降序排序
          schema:
            type: string
            enum: [name, create_time, update_time]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/StaffRes'}
    post:
      summary: 创建新关联人员
      tags: [Staff]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/StaffForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StaffRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此name的staff已经存在
  /api/database/staffs/{id}:
    get:
      summary: 查看关联人员详情
      tags: [Staff]
      parameters:
        - $ref: '#/components/parameters/StaffId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StaffRes'}
    put:
      summary: 更新关联人员信息
      tags: [Staff]
      parameters:
        - $ref: '#/components/parameters/StaffId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/StaffForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StaffRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此name的staff已经存在
    delete:
      summary: 删除关联人员
      tags: [Staff]
      parameters:
        - $ref: '#/components/parameters/StaffId'
      responses:
        204:
          description: No Content
  /api/personal/records/diary:
    get:
      summary: 查看日记本
      description: 用户加入到日记本中的记录。日记本起到标记追番和补番的作用。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/Search'
        - name: filter
          in: query
          description: |
            过滤。日记本按既定的模式进行内容过滤。
            * active: 活跃中。动画有存货，或者还在更新中。
            * watchable: 有存货。动画还有没看的集数。
            * updating: 更新中。动画还在更新中，存在更新计划。
            * completed: 已完结。动画已经完结。
            * shelve: 搁置中。动画还没有完结，已经看完所有发布的集数，但没有后续更新计划了。

            不指定任何项目，则不进行过滤。
          schema:
            type: string
            enum: [active, watchable, updating, completed, shelve]
        - name: order
          in: query
          description: |
            排序。日记本采用单项、复杂的排序模式。可以使用减号(`-`)来部分降序。
            * weekly_calendar: 周历排序。以追番周历为主要内容的排序。
              在两周以内更新的番剧会按周一到周日的顺序排序；两周之外更新的番剧其次；补番、已看完、搁置的番剧再次。
            * update_soon: 即将更新排序。以追番即将更新为主要内容的排序。
            有更新计划的番剧会按距现在更新时间的长短顺序排序；补番、已看完、搁置的番剧其次。
            * subscription_time: 订阅顺序排序。按照进度创建或记录创建的顺序排序。

            默认按周历排序。
          schema:
            type: string
            enum: [weekly_calendar, update_soon, subscription_time]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/DiaryResult'}
  /api/personal/records/timetable:
    get:
      summary: 查看放送时间表
      description: 用户的观看记录中还在更新的动画，生成它们从周一到周日的、每天的放送时间表。
      tags: [Record]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TimetableResult'}
  /api/personal/records/activity:
    get:
      summary: 查看观看动态
      description: 用户最近观看了的动画动态。按活跃时间降序排序。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/ActivityRes'}
  /api/personal/records/history:
    get:
      summary: 查看观看历史
      description: 用户观看动画的历史记录。以进度为单位，过滤已完成的进度，按完成时间降序排序。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: ordinal
          in: query
          required: false
          description: 过滤进度序号，根据选项，仅显示最早进度或最新进度
          schema: {type: string, enum: ["first", "last"]}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/HistoryRes'}
  /api/personal/records/find:
    get:
      summary: 发现动画
      description: 找到没看过的动画，或者没有加入日记本而被忘记的动画
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: filter
          in: query
          required: true
          description: |
            查找哪种动画。
            * not_seen: 没有创建观看记录的动画。也就是没有看过的动画。
            * recorded: 创建观看记录，没有加入日记本，没有进度的动画。
            * incomplete: 创建观看记录，没有加入日记本，存在没有完成的进度的动画。
          schema:
            type: string
            enum: [not_seen, recorded, incomplete]
        - name: order
          in: query
          description: |
            排序。使用逗号(`,`)组合排序，使用减号(`-`)降序排序
            * publish_time: 动画放送时间
            * create_time: 动画条目创建时间
            * update_time: 动画条目更新时间
          schema:
            type: string
            enum: [publish_time, create_time, update_time]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/FindRes'}
  /api/personal/records:
    post:
      summary: 创建新观看记录
      tags: [Record]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/RecordCreateForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/RecordDetailRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此动画的record已经存在
                      * `NOT_EXISTS` - 此动画不存在
  /api/personal/records/{id}:
    get:
      summary: 查看观看记录概况
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/RecordDetailRes'}
    patch:
      summary: 更新观看记录的基本信息
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/RecordPartialForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/RecordDetailRes'}
    delete:
      summary: 删除观看记录
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        204:
          description: No Content
  /api/personal/records/{id}/next-episodes:
    post:
      summary: 更新观看记录至下一话
      description: |
        在观看进度上，将下一话标记为已观看。
        如果不存在进度，那么自动创建一条记录。
        如果已经不存在可观看的下一话，那么会返回一个错误代码。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NextRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 不存在可观看的下一话
  /api/personal/records/{id}/progress:
    get:
      summary: 查看观看记录的进度列表
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ProgressRes'}
    post:
      summary: 为观看记录创建一条新进度
      description: 创建一条全新的进度。按照约束，只有当前没有进度，或当前最新的进度已完成时，才能创建新的进度。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ProgressCreateForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProgressRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 当前存在未完成的进度，不允许创建新进度
    put:
      summary: 编辑观看记录最新的进度
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ProgressUpdateForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProgressRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 此记录还没有进度，需要先创建进度才能编辑
  /api/personal/records/{id}/progress/{ordinal}:
    delete:
      summary: 删除观看记录中的一条指定进度
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
        - name: ordinal
          in: path
          required: true
          description: 进度序号
          schema: {type: integer}
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 指定的进度不存在
  /api/personal/records/{id}/scatter:
    get:
      summary: 查看观看记录的离散图
      description: 以统计图的结构，展示此动画的每一集，分别观看了多少次，在进度中的观看次数和离散的观看次数分别是多少。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScatterItemRes'
  /api/personal/records/{id}/scatter/watch:
    post:
      summary: 添加一条离散观看记录
      description: |
        添加一条不在进度中的观看记录。这条记录可以是已经发布的任意集数，并且不限次数添加。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ScatterForm'}
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 选取的集数超出了total_episodes或published_episodes，不能添加此记录
  /api/personal/records/{id}/scatter/undo:
    post:
      summary: 撤销上一条离散观看记录
      description: |
        撤销上一条添加的离散观看记录，用于防止误操作。可以撤销的时间限制在1小时内，超出时间的记录无法撤销。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `INVALID_OPERATION` - 不存在可以撤销的记录。
  /api/personal/records/{id}/scatter/group:
    post:
      summary: 将离散观看记录沉降到进度
      description: |
        较多的离散记录连续之后，可以将它们转换为观看进度的一部分。
        * 如果现存未完成的进度，那么从这条未完成进度即将观看的下一集开始；如果不存在进度或进度已完成，那么会从第1集开始尝试创建一条新进度。
        * 沉降从目标集数开始，在离散观看记录中搜索与上次观看时间最接近的一项，并将其加入到进度。
        * 沉降的记录必须是连续的，也就是沉降会在找不到下一集的离散记录时结束。此外沉降不会跨进度，因此也会在完成最后一集后结束。
      tags: [Record]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScatterGroupRes'
  /api/personal/comments/activity:
    get:
      summary: 查看评论动态
      description: 用户最近更新了的评论。按更新时间降序排序。
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: has_score
          in: query
          description: 按是否有评分过滤
          schema: {type: boolean}
        - name: has_article
          in: query
          description: 按是否有评论内容过滤
          schema: {type: boolean}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/CommentRes'}
  /api/personal/comments/rank:
    get:
      summary: 查看评分榜
      description: 查看所有评分过的动画的评分表。按评分降序排序。
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: min_score
          in: query
          description: 过滤不小于此分数的项目
          schema: {type: integer, minimum: 1, maximum: 10}
        - name: max_score
          in: query
          description: 过滤不大于此分数的项目
          schema: {type: integer, minimum: 1, maximum: 10}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/CommentRankRes'}
  /api/personal/comments/find:
    get:
      summary: 发现未评分的动画
      description: 发现那些已经看过，但是没有评分的动画
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Search'
        - name: order
          in: query
          description: |
            排序。使用逗号(`,`)组合排序，使用减号(`-`)降序排序
            * finish_time: 动画看完时间
            * publish_time: 动画放送时间
            * create_time: 动画条目创建时间
          schema:
            type: string
            enum: [finish_time, publish_time, create_time]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResult'
                  - type: object
                    properties:
                      result:
                        type: array
                        items: {$ref: '#/components/schemas/CommentFindRes'}
  /api/personal/comments:
    post:
      summary: 创建新评价
      tags: [Comment]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/CommentCreateForm'}
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CommentRes'}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrResult'
                  - description: |
                      * `ALREADY_EXISTS` - 此动画的comment已经存在
                      * `NOT_EXISTS` - 此动画不存在
  /api/personal/comments/{id}:
    get:
      summary: 查看评价详情
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CommentRes'}
    patch:
      summary: 更新评价内容
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/CommentUpdateForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/CommentRes'}
    delete:
      summary: 删除评价
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/AnimationId'
      responses:
        204:
          description: No Content
  /api/statistics/overview:
    get:
      summary: '查看【概览】'
      description: 【概览】列出用户看过的动画的大致情况，主要为数量和评分，并且还包括几项主要纬度的数据分布。
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OverviewRes'}
        404:
          description: Not Found
    post:
      summary: '手动更新【概览】'
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OverviewRes'}
  /api/statistics/season/overview:
    get:
      summary: '查看【季度】总览信息'
      description: 【季度】列出用户每一个季度的追番报表，以及全部季度的纵向分析。
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonOverviewRes'}
  /api/statistics/season/line:
    get:
      summary: '查看【季度】的时间线报表'
      description: 按照时间线纵向查询不同季度之间的主要数据对比。
      tags: [Statistic]
      parameters:
        - name: lower
          in: query
          required: true
          description: 下界时间范围，为年份-季度信息
          schema: {type: string, format: yyyy-S}
        - name: upper
          in: query
          required: true
          description: 上界时间范围，为年份-季度信息，包括此时间点
          schema: {type: string, format: yyyy-S}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonLineRes'}
  /api/statistics/season/{season}:
    get:
      summary: '查看【季度】的指定季度报表'
      tags: [Statistic]
      parameters:
        - name: season
          in: path
          required: true
          description: 季度
          schema: {type: string, format: yyyy-S}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonRes'}
        404:
          description: Not Found
    post:
      summary: '手动更新【季度】的指定季度报表'
      tags: [Statistic]
      parameters:
        - name: season
          in: path
          required: true
          description: 季度
          schema: {type: string, format: yyyy-S}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonRes'}
  /api/statistics/season:
    post:
      summary: '手动更新【季度】的全部季度'
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonOverviewRes'}
  /api/statistics/timeline/overview:
    get:
      summary: '查看【时间线】总览信息'
      description: 【时间线】列出用户看动画的记录按照观看日期所做的聚合统计，旨在指出用户的生涯中所看动画的分布趋势。
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TimelineOverviewRes'}
  /api/statistics/timeline:
    get:
      summary: '查询【时间线】的数据'
      tags: [Statistic]
      parameters:
        - name: aggregate
          in: query
          required: true
          description: 聚合到何种时间范围
          schema: {type: string, enum: [YEAR, SEASON, MONTH]}
        - name: lower
          in: query
          required: true
          description: 下界时间范围，根据聚合类型，为`yyyy`或`yyyy-S`或`yyyy-MM`
          schema: {type: string}
        - name: upper
          in: query
          required: true
          description: 上界时间范围，根据聚合类型，为`yyyy`或`yyyy-S`或`yyyy-MM`，包括此时间点
          schema: {type: string}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TimelineRes'}
        404:
          description: Not Found
    post:
      summary: '手动更新【时间线】的全部数据'
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/TimelineOverviewRes'}
  /api/statistics/historyline/overview:
    get:
      summary: '查看【历史线】总览信息'
      description: 【历史线】列出用户看过的动画按照动画发布日期所做的聚合统计，旨在指出不同历史年代的动画平均趋势。
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonOverviewRes'}
  /api/statistics/historyline:
    get:
      summary: '查询【历史线】的数据'
      tags: [Statistic]
      parameters:
        - name: aggregate
          in: query
          required: true
          description: 聚合到何种时间范围
          schema: {type: string, enum: [YEAR, SEASON]}
        - name: lower
          in: query
          required: true
          description: 下界时间范围，根据聚合类型，为`yyyy`或`yyyy-S`
          schema: {type: string}
        - name: upper
          in: query
          required: true
          description: 上界时间范围，根据聚合类型，为`yyyy`或`yyyy-S`，包括此时间点
          schema: {type: string}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/HistoryLineRes'}
        404:
          description: Not Found
    post:
      summary: '手动更新【历史线】的全部数据'
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SeasonOverviewRes'}
  /api/statistics/period/overview:
    get:
      summary: '查看【时间周期】总览信息'
      description: 【时间周期】给出用户在某一个大段或全部时间内，在一天或一周内的观看行为，旨在指出用户在循环时间中的看番时间点偏好。
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PeriodOverviewRes'}
  /api/statistics/period/{period}:
    get:
      summary: '查看【时间周期】的指定时间段的报表'
      tags: [Statistic]
      parameters:
        - name: period
          in: path
          required: true
          description: 选取数据的时段，填写一个年份`yyyy`，或填写`all`。
          schema: {type: string}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PeriodRes'}
        404:
          description: Not Found
  /api/statistics/period:
    post:
      summary: '手动更新【时间周期】的全部数据'
      tags: [Statistic]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PeriodOverviewRes'}
  /api/user/status:
    get:
      summary: 检验用户登录状态
      tags: [User]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StatusRes'}
  /api/user/setting:
    get:
      summary: 查看用户设置
      tags: [User]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Setting'}
    put:
      summary: 更改用户设置
      tags: [User]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Setting'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Setting'}
  /api/user/messages:
    get:
      summary: 查看消息列表
      tags: [User]
      parameters:
        - name: from
          in: query
          description: 从指定的消息id开始(不包括)向后过滤
          schema: {type: integer}
        - name: unread
          in: query
          description: 按是否已读过滤
          schema: {type: boolean}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/MessageRes'}
  /api/user/messages/count:
    get:
      summary: 查看消息数量
      tags: [User]
      parameters:
        - name: from
          in: query
          description: 从指定的消息id开始(不包括)向后过滤
          schema: {type: integer}
        - name: unread
          in: query
          description: 按是否已读过滤
          schema: {type: boolean}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: 符合此条件的消息数量
  /api/user/messages/mark-as-read:
    post:
      summary: 将消息标记为已读
      tags: [User]
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MarkAsReadForm'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: 实际成功标记的消息数量
  /api/util/timezones:
    get:
      summary: 获取可用时区
      description: 用户设置中的时区必须使用系统指定的时区选项。时区选项从此API获取。这是一个常量API，内容不会更改。
      tags: [Util]
      parameters:
        - name: usual
          in: query
          description: |
            只显示常用时区。
            全部时区的列表过于冗长，不容易找到常用的时区。开启这个参数，将只返回少数常用的时区。
          schema: {type: boolean}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: 时区名称
components:
  parameters:
    Limit:
      name: limit
      in: query
      description: 分页参数，一次请求的记录数
      schema:
        type: integer
        minimum: 0
    Offset:
      name: offset
      in: query
      description: 分页参数，请求开始的偏移量
      schema:
        type: integer
        minimum: 0
    Search:
      name: search
      in: query
      description: 模糊搜索
      schema:
        type: string
    AnimationId:
      name: id
      in: path
      required: true
      description: animation id
      schema: {type: integer}
    TagId:
      name: id
      in: path
      required: true
      description: tag id
      schema: {type: integer}
    StaffId:
      name: id
      in: path
      required: true
      description: staff id
      schema: {type: integer}
  schemas:
    AnimationForm:
      allOf:
        - $ref: '#/components/schemas/AnimationPartialForm'
        - type: object
          required: [title]
    AnimationPartialForm:
      type: object
      properties:
        title:
          type: string
          maxLength: 128
          description: 标题，不允许为空
        origin_title:
          type: string
          maxLength: 128
          description: 原语言标题
        other_title:
          type: string
          maxLength: 128
          description: 其他标题
        introduction:
          type: string
          description: 简介
        keyword:
          type: string
          maxLength: 255
          description: 关键字
        sex_limit_level:
          $ref: '#/components/schemas/SexLimitLevel'
        violence_limit_level:
          $ref: '#/components/schemas/ViolenceLimitLevel'
        original_work_type:
          $ref: '#/components/schemas/OriginalWorkType'
        publish_type:
          $ref: '#/components/schemas/PublishType'
        episode_duration:
          type: integer
          minimum: 0
          description: 每集平均时长(分钟)
        publish_time:
          type: string
          format: yyyy-MM
          description: 动画放送时间
        total_episodes:
          type: integer
          minimum: 1
          description: 总集数
        published_episodes:
          type: integer
          minimum: 0
          description: 已发布集数。如果超过了总集数，会被自动限制为总集数
        publish_plan:
          type: array
          items:
            type: string
            format: yyyy-MM-ddThh:mm:ssZ
          description: |
            接下来该动画发布的时间点。
            总项数不会超出total_episodes - published_episodes。超出的部分会被截去。
            提交时，如果存在项已经满足发布条件，会立即发布，记入发布记录，并加到published_episodes上。
            因此，如果想创建有发布记录的项，应当使用publish_plan而不是published_episodes参数。
        tags:
          type: array
          items:
            oneOf:
              - type: string
                description: "tag.id"
              - type: integer
                description: "tag.name"
          description: |
            动画关联的标签。列表可放入tag.id或tag.name，会自动查找匹配的tag。
            放入tag.name时，如果此tag不存在，将*自动创建*新的tag。
        staffs:
          type: object
          additionalProperties:
            type: array
            items:
              type: integer
          description: |
            动画关联的相关人员。key表示关联的类型，见StaffType；value表示在此类型下关联的staff.id的列表。
        relations:
          type: object
          additionalProperties:
            type: array
            items:
              type: integer
          description: |
            动画关联的其他动画。key表示关联的类型，见RelationType；value表示在此类型下关联的animation.id的列表。
            动画之间的关联可能形成关系网。实际上，编写relations时只需要按最简原则编写每个animation的直接关系，程序会自动推导出每个animation的所有直接和间接关联项，以及这些关联项的正确关系。
    TagCreateForm:
      type: object
      required: [name, introduction]
      properties:
        name:
          type: string
          maxLength: 16
          uniqueItems: true
          description: 标签名称。不能为空
        introduction:
          type: string
          description: 标签介绍
        group:
          type: string
          description: 标签分组
          nullable: true
    TagUpdateForm:
      type: object
      required: [name, introduction]
      properties:
        name:
          type: string
          maxLength: 16
          uniqueItems: true
          description: 标签名称。不能为空
        introduction:
          type: string
          description: 标签介绍
    TagPartialForm:
      type: object
      properties:
        name:
          type: string
          maxLength: 16
          uniqueItems: true
          description: 标签名称
        introduction:
          type: string
          description: 标签介绍
        group:
          type: string
          description: 标签分组
          nullable: true
        ordinal:
          type: integer
          minimum: 1
          description: 标签自定义排序序号
    StaffForm:
      type: object
      required: [name, is_organization]
      properties:
        name:
          type: string
          maxLength: 64
          description: 相关人员名称。不能为空
        origin_name:
          type: string
          maxLength: 64
          description: 相关人员原语言名称
        remark:
          type: string
          maxLength: 64
          description: 相关人员的别称
        is_organization:
          type: boolean
          description: staff是否为组织。否表示个人
        occupation:
          $ref: '#/components/schemas/StaffOccupation'
    RecordCreateForm:
      type: object
      required: [animation_id, create_type]
      properties:
        animation_id:
          type: integer
          description: animation id
        create_type:
          type: string
          description: |
            以什么方式创建新观看记录:
            * SUBSCRIBE: 订阅模式。用户从头开始订阅此动画，将其加入日记本，并创建首条观看进度。
            * SUPLEMENT: 补充模式。用户之前已经看过，因此补充一些观看记录。此模式必须填写参数`progress`。补充模式不会生成观看时间记录。
            * RECORD: 仅加入记录。创建此动画的记录，但不加入日记本，不创建进度，仅仅起到标记作用。
          enum: [SUBSCRIBE, SUPPLEMENT, RECORD]
        progress:
          type: array
          description: |
            补充模式下，需要补充的进度。每一个项表示一条从头到尾的观看进度。
            * 至少要有一条进度，可以有多条进度。
            * 进度的时间顺序是严格的，后一条记录必须严格晚于前一条记录，finish_time不能早于start_time。
            * `finish_time`和`watched_episodes`必须提供其一。finish_time提供时表示此进度已完成，忽略另一个参数，否则表示未完成。
            * 最后一条进度可以未完成。除此之外的进度都必须是已完成的。
            * 显然，由于上述条件的约束，未完结的动画只能创建一条进度。
          items:
            type: object
            properties:
              start_time:
                type: string
                format: yyyy-MM-ddThh:mm:ssZ
                description: 进度的开始时间
              finish_time:
                type: string
                format: yyyy-MM-ddThh:mm:ssZ
                description: 进度的完成时间
              watched_episodes:
                type: integer
                minimum: 0
                description: 进度已经看的集数
    RecordPartialForm:
      type: object
      properties:
        seen_original:
          type: boolean
          description: 已经看过原作
        in_diary:
          type: boolean
          description: 此记录在日记本中
    ProgressCreateForm:
      type: object
      properties:
        supplement:
          type: boolean
          description: |
            选择false或不填，以普通模式创建新进度。
            选择true，则以补充模式创建进度。与Record创建的补充模式类似。
            补充模式下，需要使用下面三个参数。
            * 进度的finish_time不能早于start_time。
            * `finish_time`和`watched_episodes`必须提供其一。finish_time提供时表示此进度已完成，忽略另一个参数，否则表示未完成。
            * 如果新进度未完成，则必须保证现在没有未完成的进度，且新进度将追加到末尾；如果新进度已完成，则根据finish_time排序决定新进度的位置。
        start_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 进度的开始时间
        finish_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 进度的完成时间
        watched_episodes:
          type: integer
          minimum: 0
          description: 进度已经看的集数
    ProgressUpdateForm:
      type: object
      required: [watched_episodes]
      properties:
        watched_episodes:
          type: integer
          minimum: 0
          description: |
            已观看的集数。此数值范围不会超出`published_episodes`的上限。
            减小此数值会清除已有的观看时间记录，增大此数值会正常创建观看时间记录。
    ScatterForm:
      type: object
      required: [episode]
      properties:
        episode:
          type: integer
          minimum: 1
          description: 离散观看的集数。这会在对应集数的离散观看记录上+1。
    CommentCreateForm:
      allOf:
        - type: object
          required: [animation_id, score, article]
          properties:
            animation_id:
              type: integer
              description: animation id
        - $ref: '#/components/schemas/CommentUpdateForm'
    CommentUpdateForm:
      type: object
      properties:
        score:
          type: integer
          minimum: 1
          maximum: 10
          description: 评分
        article_title:
          type: string
          maxLength: 128
          description: 评论标题
        article:
          type: string
          description: 评论内容
    MarkAsReadForm:
      type: object
      required: [message_ids]
      properties:
        message_ids:
          type: array
          items:
            type: integer
            description: 要标记为已读的message id列表
    AnimationRes:
      type: object
      properties:
        id:
          type: integer
          description: animation id
          uniqueItems: true
        title:
          type: string
          description: 标题
        cover:
          type: string
          nullable: true
          description: 封面文件的文件名
        publish_time:
          type: string
          format: yyyy-MM
          nullable: true
          description: 动画放送时间
        total_episodes:
          type: integer
          description: 总集数
        published_episode:
          type: integer
          description: 已发布集数。不会超过总集数
        create_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 记录创建时间
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 记录更新时间
    AnimationDetailRes:
      type: object
      properties:
        id:
          type: integer
          description: animation id
          uniqueItems: true
        title:
          type: string
          description: 标题
        origin_title:
          type: string
          nullable: true
          description: 原语言标题
        other_title:
          type: string
          nullable: true
          description: 其他标题
        cover:
          type: string
          nullable: true
          description: 封面文件的文件名
        publish_type:
          $ref: '#/components/schemas/PublishType'
        publish_time:
          type: string
          format: yyyy-MM
          description: 动画放送时间
        episode_duration:
          type: integer
          description: 每集平均时长(分钟)
        total_episodes:
          type: integer
          description: 总集数
          nullable: false
        published_episode:
          type: integer
          description: 已发布集数。不会超过总集数
          nullable: false
        publish_plan:
          type: array
          items:
            type: string
            format: yyyy-MM-ddThh:mm:ssZ
            nullable: false
          description: 接下来该动画的发布时间点
          nullable: false
        introduction:
          type: string
          description: 简介
        keyword:
          type: string
          description: 关键字
        sex_limit_level:
          $ref: '#/components/schemas/SexLimitLevel'
        violence_limit_level:
          $ref: '#/components/schemas/ViolenceLimitLevel'
        original_work_type:
          $ref: '#/components/schemas/OriginalWorkType'
        tags:
          type: array
          description: 关联的标签
          items:
            $ref: '#/components/schemas/TagRes'
        staffs:
          type: array
          description: 关联的相关人员
          items:
            $ref: '#/components/schemas/StaffRelationRes'
        relations:
          type: object
          additionalProperties:
            type: array
            items:
              type: integer
          description: 用户编写的关联关系
        relations_topology:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: animation id
              title:
                type: string
                description: 标题
              cover:
                type: string
                nullable: true
                description: 封面文件的文件名
              relation_type:
                $ref: '#/components/schemas/RelationType'
          description: 全量关联关系
        create_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 记录创建时间
          nullable: false
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 记录更新时间
          nullable: false
    AnimationPartRes:
      type: object
      properties:
        animation_id:
          type: integer
          description: animation id
        title:
          type: string
          description: 动画标题
        cover:
          type: string
          nullable: true
          description: 动画封面文件名
    TagRes:
      type: object
      properties:
        id:
          type: integer
          description: tag id
        name:
          type: string
          description: 标签名称
    TagListRes:
      allOf:
        - $ref: '#/components/schemas/TagRes'
        - type: object
          properties:
            group:
              type: integer
              description: 标签分组
    TagDetailRes:
      allOf:
        - $ref: '#/components/schemas/TagRes'
        - type: object
          properties:
            introduction:
              type: string
              description: 标签介绍
            group:
              type: string
              nullable: true
              description: 标签分组
            ordinal:
              type: integer
              description: 标签的自定义排序顺序
            animation_count:
              type: integer
              description: 此标签下的动画数量
            create_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 创建时间
            update_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 更新时间
    StaffRes:
      type: object
      properties:
        id:
          type: integer
          description: staff id
        name:
          type: string
          description: staff名称
        cover:
          type: string
          nullable: true
          description: staff头像文件名
        is_organization:
          type: boolean
          description: staff是否为组织。否表示个人
        occupation:
          $ref: '#/components/schemas/StaffOccupation'
        origin_name:
          type: string
          nullable: true
          description: 相关人员原语言名称
        remark:
          type: string
          nullable: true
          description: 相关人员的别称
        animation_count:
          type: integer
          description: 此staff下的动画数量
        create_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 创建时间
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 更新时间
    StaffRelationRes:
      type: object
      properties:
        id:
          type: integer
          description: staff id
        name:
          type: string
          description: staff名称
        cover:
          type: string
          nullable: true
          description: staff头像文件名
        is_organization:
          type: boolean
          description: staff是否为组织。否表示个人
        occupation:
          $ref: '#/components/schemas/StaffOccupation'
        staff_type:
          $ref: '#/components/schemas/StaffType'
    DiaryResult:
      type: object
      properties:
        result:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/AnimationPartRes'
              - $ref: '#/components/schemas/RecordEpisodesPart'
              - type: object
                properties:
                  next_publish_plan:
                    type: string
                    format: yyyy-MM-ddThh:mm:ssZ
                    nullable: true
                    description: 此动画下一次更新的时间点
                  status:
                    $ref: '#/components/schemas/RecordStatus'
                  subscription_time:
                    type: string
                    format: yyyy-MM-ddThh:mm:ssZ
                    description: 动画的订阅时间。实际是进度创建时间，或记录创建时间
        night_time_table:
          type: boolean
          description: 用户的`night_time_table`选项。附加是为了减少查询。
    TimetableResult:
      type: object
      properties:
        result:
          type: object
          description: 每周时间表。key表示周数(MON~SUN = 1~7)，value表示这一天更新的动画列表
          additionalProperties:
            allOf:
              - $ref: '#/components/schemas/AnimationPartRes'
              - type: object
                properties:
                  next_publish_time:
                    type: string
                    format: yyyy-MM-ddThh:mm:ssZ
                    description: 该动画下一次发布的时间
                  next_publish_episodes:
                    type: integer
                    description: 该动画下一次要发布的集数
        night_time_table:
          type: boolean
          description: 用户的`night_time_table`选项。附加是为了减少查询。
    ActivityRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          properties:
            active_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 上次活动时间
            active_event:
              type: object
              description: 上次活动事件
              properties:
                type:
                  $ref: '#/components/schemas/ActiveEventType'
                episode:
                  type: array
                  nullable: true
                  items:
                    type: integer
                  description: 如果上次活动是观看活动，那么给出上次活动的观看的集数
            progress:
              type: number
              minimum: 0
              description: 综合观看进度。整数部分表示已完成的进度数量，小数部分表示当前进度的完成百分比
    HistoryRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          properties:
            start_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 开始时间
            finish_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 结束时间
            ordinal:
              type: integer
              minimum: 1
              description: 进度的序号
    FindRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - $ref: '#/components/schemas/RecordEpisodesPart'
        - type: object
          properties:
            watched_episodes:
              type: integer
              nullable: true
              description: 已观看集数
            progress:
              type: number
              minimum: 0
              nullable: true
              description: 综合观看进度。整数部分表示已完成的进度数量，小数部分表示当前进度的完成百分比
    RecordDetailRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - $ref: '#/components/schemas/RecordEpisodesPart'
        - type: object
          properties:
            publish_plan:
              type: array
              items:
                type: string
                format: yyyy-M-ddThh:mm:ssZ
              description: 放送计划
            seen_original:
              type: boolean
              description: 看过原作
            status:
              $ref: '#/components/schemas/RecordStatus'
            in_diary:
              type: boolean
              description: 已加入日记本
            progress_count:
              type: integer
              minimum: 0
              description: 总的进度数量
            create_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 创建时间
            update_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 更新时间
    ProgressRes:
      type: object
      properties:
        ordinal:
          type: integer
          minimum: 1
          description: 进度的序号
        watched_episodes:
          type: integer
          description: 已观看集数
        start_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          nullable: true
          description: 进度开始时间
        finish_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          nullable: true
          description: 进度完成时间
    NextRes:
      type: object
      properties:
        watched_episodes:
          type: integer
          description: 已观看集数
    ScatterItemRes:
      type: object
      properties:
        episode:
          type: integer
          minimum: 1
          description: 集数
        progress_times:
          type: integer
          minimum: 0
          description: 该集数在进度中的观看次数
        scatter_times:
          type: integer
          minimum: 0
          description: 该集数在离散记录中的观看次数
    ScatterGroupRes:
      type: object
      properties:
        group_to:
          type: string
          description: |
            沉降的目标。
            * CURRENT: 沉降到现有的进度。
            * NEW: 沉降到一条新建的进度。
            * NONE: 没有可沉降的离散记录。
          enum: [CURRENT, NEW, NONE]
        progress_ordinal:
          type: integer
          minimum: 1
          description: 沉降的目标进度的序号
        watched_episodes:
          type: integer
          minimum: 1
          description: 沉降之后，此进度的已观看集数
        append_episodes:
          type: integer
          minimum: 1
          description: 沉降所新增的已观看集数
    RecordEpisodesPart:
      type: object
      properties:
        total_episodes:
          type: integer
          description: 总集数
        published_episodes:
          type: integer
          description: 已发布集数
        watched_episodes:
          type: integer
          description: 已观看集数
    CommentRankRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          properties:
            score:
              type: integer
              minimum: 1
              maximum: 10
              description: 评分
    CommentFindRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          properties:
            finish_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 记录中的看完时间
            publish_time:
              type: string
              format: yyyy-MM
              description: 动画放送时间
            create_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 动画条目创建时间
    CommentRes:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          properties:
            score:
              type: integer
              nullable: true
              minimum: 1
              maximum: 10
              description: 评分
            article_title:
              type: string
              nullable: true
              description: 评论标题
            article:
              type: string
              nullable: true
              description: 评论内容
            create_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 创建时间
            update_time:
              type: string
              format: yyyy-MM-ddThh:mm:ssZ
              description: 更新时间
    StatusRes:
      type: object
      properties:
        is_login:
          type: boolean
          description: 用户是否已经登录
        is_staff:
          type: boolean
          nullable: true
          description: 用户是否拥有此系统的管理员身份
        username:
          type: string
          description: 用户名
    MessageRes:
      type: object
      properties:
        id:
          type: integer
          description: message id
        type:
          $ref: '#/components/schemas/MessageType'
        content:
          description: 根据type决定content的内容。
          oneOf:
            - $ref: '#/components/schemas/MessageContentPublish'
    MessageContentPublish:
      allOf:
        - $ref: '#/components/schemas/AnimationPartRes'
        - type: object
          description: 动画更新推送。(old, new]区间是新更新的集数。
          properties:
            old_episodes:
              type: integer
              description: 更新前的episodes
            new_episodes:
              type: integer
              description: 更新后的episodes
    OverviewRes:
      type: object
      properties:
        total_animations:
          type: integer
          description: 至少看过1集的动画的总数量
        total_episodes:
          type: integer
          description: 看过的动画集数的累计数量(包括重复和离散)
        total_duration:
          type: integer
          description: 看过的动画集数的累计时长(包括重复和离散)，单位分钟。依赖动画的episode_duration属性，不设置此属性的不列入统计
        avg_score:
          type: number
          nullable: true
          description: 所有评过分的动画的平均分
        score_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的评分数量分布。`key`为分数`[1, 10]`，值为动画数量。没有数量的评分不列入。
        original_work_type_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的原作类型数量分布。`key`为原作类型的枚举，值为动画数量。没有数量的不列入。
        publish_type_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的放送类型数量分布。`key`为放送类型的枚举，值为动画数量。没有数量的不列入。
        sex_limit_level_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的性限制等级数量分布。`key`为限制等级的枚举，值为动画数量。没有数量的不列入。
        violence_limit_level_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画暴力性限制等级数量分布。`key`为限制等级的枚举，值为动画数量。没有数量的不列入。
        tag_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的标签数量分布。`key`为标签的`name`，值为动画数量。没有数量的不列入。
        sex_limit_level_avg_scores:
          type: object
          additionalProperties:
            type: number
            description: 所有动画的性限制等级的评分分布。`key`为限制等级的枚举，值为平均分。动画数量为0的不列入。
        violence_limit_level_avg_scores:
          type: object
          additionalProperties:
            type: number
            description: 所有动画的暴力限制等级的评分分布。`key`为限制等级的枚举，值为平均分。动画数量为0的不列入。
        tag_avg_scores:
          type: object
          additionalProperties:
            type: number
            description: 所有动画的标签的评分分布。`key`为标签的`name`，值为平均分。动画数量为0的不列入。
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    SeasonOverviewRes:
      type: object
      properties:
        begin_year:
          type: integer
          nullable: true
          description: 最早一季的年份
        begin_season:
          type: integer
          nullable: true
          description: 最早一季的季度，取[1, 4]
        end_year:
          type: integer
          nullable: true
          description: 最新一季的年份
        end_season:
          type: integer
          nullable: true
          description: 最新一季的季度，取[1, 4]
        update_time:
          type: string
          nullable: true
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    SeasonLineRes:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              year:
                type: integer
                description: 年份
              season:
                type: integer
                description: 季度，取[1, 4]
              total_animations:
                type: integer
                description: 此季度总共订阅的动画数量
              max_score:
                type: integer
                nullable: true
                description: 本季最高的评分
              min_score:
                type: integer
                nullable: true
                description: 本季最低的评分
              avg_score:
                type: number
                nullable: true
                description: 本季平均分
              avg_positivity:
                type: number
                nullable: true
                description: 本季平均积极性
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    SeasonRes:
      type: object
      properties:
        total_animations:
          type: integer
          description: 此季度总共订阅的动画数量
        max_score:
          type: integer
          nullable: true
          description: 本季最高的评分
        min_score:
          type: integer
          nullable: true
          description: 本季最低的评分
        avg_score:
          type: number
          nullable: true
          description: 本季平均分
        avg_positivity:
          type: number
          nullable: true
          description: 本季平均积极性
        sex_limit_level_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的性限制等级数量分布。`key`为限制等级的枚举，值为动画数量。没有数量的不列入。
        violence_limit_level_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画暴力性限制等级数量分布。`key`为限制等级的枚举，值为动画数量。没有数量的不列入。
        tag_counts:
          type: object
          additionalProperties:
            type: integer
            description: 所有动画的标签数量分布。`key`为标签的`name`，值为动画数量。没有数量的不列入。
        animations:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              cover:
                type: string
                nullable: true
              sex_limit_level: {$ref: '#/components/schemas/SexLimitLevel'}
              violence_limit_level: {$ref: '#/components/schemas/ViolenceLimitLevel'}
              subscription_time:
                type: string
                format: yyyy-MM-ddThh:mm:ssZ
                description: 订阅时间
              finish_time:
                type: string
                nullable: true
                format: yyyy-MM-ddThh:mm:ssZ
                description: 看完时间
              score:
                type: integer
                nullable: true
                description: 此动画的评分
              positivity:
                type: number
                nullable: true
                description: 此动画的积极性分数
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    HistoryLineRes:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
                description: 时间标记，根据聚合范围而定，为`yyyy`或`yyyy-S`
              total_animations:
                type: integer
                description: 此时间段内总共订阅的动画数量
              max_score:
                type: integer
                nullable: true
                description: 时间段内最高的评分
              min_score:
                type: integer
                nullable: true
                description: 时间段内最低的评分
              avg_score:
                type: number
                nullable: true
                description: 时间段平均分
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    TimelineOverviewRes:
      type: object
      properties:
        begin_year:
          type: integer
          nullable: true
          description: 最早数据点的年份
        begin_month:
          type: integer
          nullable: true
          description: 最早数据点的月份，取[1, 12]
        end_year:
          type: integer
          nullable: true
          description: 最新数据点的年份
        end_month:
          type: integer
          nullable: true
          description: 最新数据点的季度，取[1, 12]
        update_time:
          type: string
          nullable: true
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    TimelineRes:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
                description: 数据点时间点，根据聚合类型，为`yyyy`或`yyyy-S`或`yyyy-MM`
              watched_animations:
                type: integer
                description: 此时间段内首次看完的动画数量
              rewatched_animations:
                type: integer
                description: 此时间段内重看看完的动画数量
              watched_episodes:
                type: integer
                description: 此时间段内首次看完的动画集数
              rewatched_episodes:
                type: integer
                description: 此时间段内重看看完的动画集数
              scatter_episodes:
                type: integer
                description: 此时间段内离散地看完的动画集数
              watched_duration:
                type: integer
                description: 此时间段内首次看完的动画集数的总时长
              rewatched_duration:
                type: integer
                description: 此时间段内重看看完的动画集数的总时长
              scatter_duration:
                type: integer
                description: 此时间段内离散地看完的动画集数的总时长
              max_score:
                type: integer
                nullable: true
                description: 此时间段内首次看完的动画的最高评分
              min_score:
                type: integer
                nullable: true
                description: 此时间段内首次看完的动画的最低评分
              avg_score:
                type: number
                nullable: true
                description: 此时间段内首次看完的动画的平均分
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    PeriodOverviewRes:
      type: object
      properties:
        begin_year:
          type: integer
          nullable: true
          description: 最早数据点的年份
        end_year:
          type: integer
          nullable: true
          description: 最新数据点的年份
        update_time:
          type: string
          nullable: true
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    PeriodRes:
      type: object
      properties:
        episode_of_hours:
          type: object
          additionalProperties:
            type: integer
          description: 本时间段内，以24小时为周期，每个小时内看的动画集数的总和
        episode_of_weekdays:
          type: object
          additionalProperties:
            type: integer
          description: 本时间段内，以一周为周期，每天内看的动画集数的总和
        day_of_hours:
          type: object
          additionalProperties:
            type: integer
          description: 本时间段内，以24小时为周期，每个小时内看有看动画的天数总和
        day_of_weekdays:
          type: object
          additionalProperties:
            type: integer
          description: 本时间段内，以一周为周期，每天有看动画的天数总和
        update_time:
          type: string
          format: yyyy-MM-ddThh:mm:ssZ
          description: 上次更新时间
    ListResult:
      type: object
      properties:
        total:
          type: integer
          description: 不包含分页条件时，此列表的总记录数
        result:
          type: array
          items:
            type: object
    ErrResult:
      type: object
      properties:
        code: {type: string}
        message: {type: string}
    Setting:
      type: object
      required: [animation_update_notice, night_time_table, auto_update_statistics, timezone]
      properties:
        animation_update_notice:
          type: boolean
          description: 日记中的动画更新时推送消息
        night_time_table:
          type: boolean
          description: 采用夜晚型时间表，凌晨2:00之前的动画在时间表上算作前一天。
        auto_update_statistics:
          type: boolean
          description: 后台自动更新统计项目
        timezone:
          type: string
          description: 用户的主要时区。时区应当填写从时区API获得的时区名称
    OriginalWorkType:
      type: string
      nullable: true
      description: 原作类型
      enum: [ORIGINAL, MANGA, NOVEL, GAME, OTHER]
    PublishType:
      type: string
      nullable: true
      description: 放送类型
      enum: [TV_AND_WEB, MOVIE, OVA_AND_OAD]
    SexLimitLevel:
      type: string
      nullable: true
      description: 分级(性)
      enum: [ALL, R12, R15, R17, R18]
    ViolenceLimitLevel:
      type: string
      nullable: true
      description: 分级(暴力)
      enum: [NO, A, B, C, D]
    RelationType:
      type: string
      description: 动画关联关系类型
      enum: [PREV, NEXT, FANWAI, MAIN_ARTICLE, RUMOR, TRUE_PASS, SERIES]
    StaffOccupation:
      type: string
      nullable: true
      description: 相关人员职业类型信息
      enum: [ANIMATION_COMPANY, GAME_COMPANY, NOVEL_AUTHOR, MANGA_AUTHOR, ANIMATION_STAFF, OTHER]
    StaffType:
      type: string
      description: 相关人员关联类型
      enum: [AUTHOR, STAFF, COMPANY]
    RecordStatus:
      type: string
      description: 记录的进度状态
      enum: [NO_PROGRESS, WATCHING, REWATCHING, COMPLETED]
    ActiveEventType:
      type: string
      description: 记录的活动事件类型
      enum: [CREATE_RECORD, CREATE_PROGRESS, WATCH_EPISODE]
    MessageType:
      type: string
      description: 消息类型
      enum: [PUBLISH, OTHER]
